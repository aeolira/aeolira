---
// src/components/CalendarSystem.astro
import { useState } from "preact/hooks";
import dayjs from 'dayjs';
import 'dayjs/locale/zh-cn';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import { formatLunarDate, getLunarBirthday } from '../utils/lunar';

dayjs.locale('zh-cn');
dayjs.extend(customParseFormat);

// 初始待办事项数据
const initialTodos = [
  { id: 1, text: '完成网站日历功能', date: '2025-08-12', completed: false, type: 'work' },
  { id: 2, text: '购买生日礼物', date: '2025-08-15', completed: false, type: 'personal' },
  { id: 3, text: '团队会议', date: '2025-08-20', completed: true, type: 'work' }
];

// 初始生日数据
const initialBirthdays = [
  { id: 1, name: '张三', date: '1990-05-15', isLunar: false },
  { id: 2, name: '李四', date: '1985-08-08', isLunar: true },
  { id: 3, name: '王五', date: '1992-12-25', isLunar: false }
];

// 当前日期信息
const today = dayjs();
const currentMonth = today.month();
const currentYear = today.year();
---

<div class="calendar-system">
  <!-- 日历视图 -->
  <div class="calendar-container">
    <div class="calendar-header">
      <div class="calendar-nav">
        <button id="prev-year">&lt;&lt;</button>
        <button id="prev-month">&lt;</button>
        <h2 id="current-month">{today.format('YYYY年MM月')}</h2>
        <button id="next-month">&gt;</button>
        <button id="next-year">&gt;&gt;</button>
      </div>
      <div class="calendar-actions">
        <button id="today-btn">今天</button>
        <button id="add-event">添加事件</button>
      </div>
    </div>
    
    <div class="calendar-weekdays">
      <div>周日</div>
      <div>周一</div>
      <div>周二</div>
      <div>周三</div>
      <div>周四</div>
      <div>周五</div>
      <div>周六</div>
    </div>
    
    <div class="calendar-days" id="calendar-days">
      <!-- 日历日期将通过JS动态生成 -->
    </div>
  </div>
  
  <!-- 侧边栏 -->
  <div class="sidebar">
    <!-- 待办事项 -->
    <div class="todo-section">
      <div class="section-header">
        <h3>待办事项</h3>
        <button id="add-todo">+ 添加</button>
      </div>
      <div class="todo-list" id="todo-list">
        {initialTodos.map(todo => (
          <div class={`todo-item ${todo.completed ? 'completed' : ''}`}>
            <input 
              type="checkbox" 
              checked={todo.completed} 
              class="todo-checkbox"
            />
            <div class="todo-content">
              <span class="todo-text">{todo.text}</span>
              <div class="todo-meta">
                <span class="todo-date">{dayjs(todo.date).format('MM月DD日')}</span>
                <span class={`todo-type ${todo.type}`}>
                  {todo.type === 'work' ? '工作' : '个人'}
                </span>
              </div>
            </div>
            <button class="todo-delete">&times;</button>
          </div>
        ))}
      </div>
    </div>
    
    <!-- 生日 -->
    <div class="birthday-section">
      <div class="section-header">
        <h3>生日提醒</h3>
        <button id="add-birthday">+ 添加</button>
      </div>
      <div class="birthday-list" id="birthday-list">
        {initialBirthdays.map(birthday => (
          <div class="birthday-item">
            <div class="birthday-icon">🎂</div>
            <div class="birthday-info">
              <div class="birthday-name">{birthday.name}</div>
              <div class="birthday-date">
                {birthday.isLunar 
                  ? `${formatLunarDate(birthday.date)} (农历)`
                  : dayjs(birthday.date).format('YYYY年MM月DD日')}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
    
    <!-- 农历日期 -->
    <div class="lunar-info">
      <h3>今日农历</h3>
      <div class="lunar-date">{formatLunarDate(today.format('YYYY-MM-DD'))}</div>
      <div class="lunar-zodiac">
        <span class="zodiac-animal">🐯</span>
        <span>虎年</span>
      </div>
    </div>
  </div>
</div>

<!-- 添加事件模态框 -->
<div class="modal" id="event-modal">
  <div class="modal-content">
    <h3>添加新事件</h3>
    <form id="event-form">
      <div class="form-group">
        <label>事件类型</label>
        <select id="event-type">
          <option value="todo">待办事项</option>
          <option value="birthday">生日</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="event-title">标题</label>
        <input type="text" id="event-title" required />
      </div>
      
      <div class="form-group">
        <label for="event-date">日期</label>
        <input type="date" id="event-date" required />
      </div>
      
      <div id="birthday-fields" class="hidden">
        <div class="form-group">
          <label for="birthday-name">姓名</label>
          <input type="text" id="birthday-name" />
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="is-lunar" />
            农历生日
          </label>
        </div>
      </div>
      
      <div class="form-group">
        <label for="event-notes">备注</label>
        <textarea id="event-notes" rows="3"></textarea>
      </div>
      
      <div class="form-actions">
        <button type="button" class="btn-cancel">取消</button>
        <button type="submit" class="btn-save">保存</button>
      </div>
    </form>
  </div>
</div>

<style>
  .calendar-system {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    margin-top: 1rem;
  }
  
  /* 日历样式 */
  .calendar-container {
    background: var(--color-card);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: 1.5rem;
  }
  
  .calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }
  
  .calendar-nav {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .calendar-nav h2 {
    margin: 0 1rem;
    min-width: 140px;
    text-align: center;
  }
  
  .calendar-nav button, 
  .calendar-actions button {
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.5rem 0.8rem;
    cursor: pointer;
    transition: var(--transition);
  }
  
  .calendar-nav button:hover, 
  .calendar-actions button:hover {
    background: #3a5ae0;
  }
  
  .calendar-actions {
    display: flex;
    gap: 0.5rem;
  }
  
  .calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    text-align: center;
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: var(--color-secondary);
  }
  
  .calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 4px;
  }
  
  .calendar-day {
    aspect-ratio: 1/1;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 0.5rem;
    position: relative;
    cursor: pointer;
    transition: var(--transition);
  }
  
  .calendar-day:hover {
    background: var(--color-primary-light);
  }
  
  .calendar-day.today {
    background: var(--color-primary-light);
    border-color: var(--color-primary);
  }
  
  .day-number {
    font-size: 1.2rem;
    font-weight: bold;
  }
  
  .lunar-day {
    font-size: 0.8rem;
    color: var(--color-secondary);
    position: absolute;
    bottom: 0.5rem;
    right: 0.5rem;
  }
  
  .event-indicator {
    position: absolute;
    bottom: 0.5rem;
    left: 0.5rem;
    display: flex;
    gap: 3px;
  }
  
  .event-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }
  
  .event-dot.todo {
    background: var(--color-primary);
  }
  
  .event-dot.birthday {
    background: var(--color-success);
  }
  
  /* 侧边栏样式 */
  .sidebar {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .section-header h3 {
    font-size: 1.3rem;
    color: var(--color-primary);
  }
  
  .section-header button {
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.3rem 0.8rem;
    cursor: pointer;
    transition: var(--transition);
  }
  
  .section-header button:hover {
    background: #3a5ae0;
  }
  
  .todo-section, 
  .birthday-section,
  .lunar-info {
    background: var(--color-card);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: 1.5rem;
  }
  
  .todo-list {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }
  
  .todo-item {
    display: flex;
    align-items: flex-start;
    gap: 0.8rem;
    padding: 0.8rem;
    border-radius: 8px;
    border: 1px solid var(--color-border);
    transition: var(--transition);
  }
  
  .todo-item:hover {
    border-color: var(--color-primary);
    box-shadow: 0 2px 8px rgba(74, 108, 247, 0.15);
  }
  
  .todo-item.completed .todo-text {
    text-decoration: line-through;
    color: var(--color-secondary);
  }
  
  .todo-checkbox {
    margin-top: 0.3rem;
  }
  
  .todo-content {
    flex: 1;
  }
  
  .todo-text {
    display: block;
    margin-bottom: 0.3rem;
  }
  
  .todo-meta {
    display: flex;
    gap: 0.8rem;
    font-size: 0.85rem;
    color: var(--color-secondary);
  }
  
  .todo-type {
    padding: 0.1rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }
  
  .todo-type.work {
    background: rgba(74, 108, 247, 0.1);
    color: var(--color-primary);
  }
  
  .todo-type.personal {
    background: rgba(40, 167, 69, 0.1);
    color: var(--color-success);
  }
  
  .todo-delete {
    background: none;
    border: none;
    font-size: 1.2rem;
    color: var(--color-secondary);
    cursor: pointer;
    padding: 0 0.3rem;
  }
  
  .birthday-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .birthday-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.8rem;
    border-radius: 8px;
    border: 1px solid var(--color-border);
    transition: var(--transition);
  }
  
  .birthday-item:hover {
    border-color: var(--color-success);
    box-shadow: 0 2px 8px rgba(40, 167, 69, 0.15);
  }
  
  .birthday-icon {
    font-size: 1.5rem;
  }
  
  .birthday-name {
    font-weight: bold;
    margin-bottom: 0.2rem;
  }
  
  .birthday-date {
    font-size: 0.9rem;
    color: var(--color-secondary);
  }
  
  .lunar-info {
    text-align: center;
  }
  
  .lunar-date {
    font-size: 1.2rem;
    font-weight: bold;
    color: var(--color-primary);
    margin: 1rem 0;
  }
  
  .lunar-zodiac {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 1.1rem;
  }
  
  .zodiac-animal {
    font-size: 1.8rem;
  }
  
  /* 模态框样式 */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    pointer-events: none;
    transition: var(--transition);
  }
  
  .modal.active {
    opacity: 1;
    pointer-events: all;
  }
  
  .modal-content {
    background: white;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    width: 100%;
    max-width: 500px;
    padding: 2rem;
  }
  
  .form-group {
    margin-bottom: 1.2rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 0.8rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    font-family: inherit;
  }
  
  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    margin-top: 1.5rem;
  }
  
  .btn-cancel {
    background: var(--color-secondary);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.6rem 1.2rem;
    cursor: pointer;
  }
  
  .btn-save {
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.6rem 1.2rem;
    cursor: pointer;
  }
  
  .hidden {
    display: none;
  }
  
  /* 响应式设计 */
  @media (max-width: 992px) {
    .calendar-system {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 576px) {
    .calendar-header {
      flex-direction: column;
      gap: 1rem;
    }
    
    .calendar-actions {
      width: 100%;
      justify-content: center;
    }
  }
</style>

<script>
  // 客户端脚本
  document.addEventListener('DOMContentLoaded', () => {
    // 日历渲染逻辑
    const renderCalendar = (year, month) => {
      const calendarDays = document.getElementById('calendar-days');
      calendarDays.innerHTML = '';
      
      // 更新标题
      document.getElementById('current-month').textContent = `${year}年${month + 1}月`;
      
      // 获取当月第一天和最后一天
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      
      // 获取当月第一天是星期几（0-6，0代表周日）
      const firstDayIndex = firstDay.getDay();
      
      // 获取上个月最后几天
      const prevLastDay = new Date(year, month, 0).getDate();
      
      // 创建空白格子（上个月）
      for (let i = firstDayIndex; i > 0; i--) {
        const day = document.createElement('div');
        day.className = 'calendar-day prev-month';
        day.innerHTML = `
          <div class="day-number">${prevLastDay - i + 1}</div>
        `;
        calendarDays.appendChild(day);
      }
      
      // 创建当月格子
      for (let i = 1; i <= lastDay.getDate(); i++) {
        const day = document.createElement('div');
        day.className = 'calendar-day';
        const dateStr = `${year}-${(month + 1).toString().padStart(2, '0')}-${i.toString().padStart(2, '0')}`;
        
        // 检查是否是今天
        const today = new Date();
        const isToday = year === today.getFullYear() && 
                        month === today.getMonth() && 
                        i === today.getDate();
        
        if (isToday) {
          day.classList.add('today');
        }
        
        // 事件指示器
        let eventDots = '';
        if (i % 5 === 0) {
          eventDots += '<div class="event-dot todo"></div>';
        }
        if (i % 7 === 0) {
          eventDots += '<div class="event-dot birthday"></div>';
        }
        
        day.innerHTML = `
          <div class="day-number">${i}</div>
          <div class="lunar-day">${formatLunarDay(i)}</div>
          <div class="event-indicator">${eventDots}</div>
        `;
        calendarDays.appendChild(day);
      }
    };
    
    // 简单格式化农历日期
    const formatLunarDay = (day) => {
      const lunarDays = ['初一', '初二', '初三', '初四', '初五', '初六', '初七', 
                         '初八', '初九', '初十', '十一', '十二', '十三', '十四', 
                         '十五', '十六', '十七', '十八', '十九', '二十', '廿一', 
                         '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', 
                         '廿九', '三十'];
      return lunarDays[(day - 1) % 30];
    };
    
    // 初始渲染
    renderCalendar(currentYear, currentMonth);
    
    // 导航按钮事件
    document.getElementById('prev-year').addEventListener('click', () => {
      currentYear--;
      renderCalendar(currentYear, currentMonth);
    });
    
    document.getElementById('prev-month').addEventListener('click', () => {
      currentMonth--;
      if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
      }
      renderCalendar(currentYear, currentMonth);
    });
    
    document.getElementById('next-month').addEventListener('click', () => {
      currentMonth++;
      if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
      }
      renderCalendar(currentYear, currentMonth);
    });
    
    document.getElementById('next-year').addEventListener('click', () => {
      currentYear++;
      renderCalendar(currentYear, currentMonth);
    });
    
    document.getElementById('today-btn').addEventListener('click', () => {
      const today = new Date();
      currentYear = today.getFullYear();
      currentMonth = today.getMonth();
      renderCalendar(currentYear, currentMonth);
    });
    
    // 模态框控制
    const modal = document.getElementById('event-modal');
    const eventForm = document.getElementById('event-form');
    const birthdayFields = document.getElementById('birthday-fields');
    const eventType = document.getElementById('event-type');
    
    document.getElementById('add-event').addEventListener('click', () => {
      modal.classList.add('active');
    });
    
    document.querySelector('.btn-cancel').addEventListener('click', () => {
      modal.classList.remove('active');
    });
    
    eventType.addEventListener('change', () => {
      if (eventType.value === 'birthday') {
        birthdayFields.classList.remove('hidden');
      } else {
        birthdayFields.classList.add('hidden');
      }
    });
    
    eventForm.addEventListener('submit', (e) => {
      e.preventDefault();
      // 这里添加保存事件的逻辑
      alert('事件已保存！');
      modal.classList.remove('active');
      eventForm.reset();
    });
  });
</script>